#!/usr/bin/python
from p2p.networks.tao import TaoPeerThread
from infiniti.params import *
from p2p.protocol.serializers import *
from p2p.protocol.queues import MemPoolManager
from p2p.rpc import RPCServer, RPCServerThread
from infiniti.rpc import syncwallets, createwallet
import threading, socket
import sys, traceback, subprocess
import sched, time, os
import select
from utils.helpers import *
from utils.db import open_db, writebatch

from json import load
from urllib2 import urlopen

from utils.daemonize import Daemon
from wallet.wallet import Wallet,get_node_addresses
import ipfsapi

class IPFSThread(threading.Thread):
	def __init__(self, threadID, name, logger):
		threading.Thread.__init__(self)
		self.threadID = threadID
		self.name = name
		self.counter = self.threadID
		self.logger = logger
		self.halt = False
		self.process = None

	def run(self):
		# Make sure we're kosher

		try:
			self.logger.info("IPFS start.")
			self.process = subprocess.Popen(["ipfs", "daemon"], stdout=subprocess.PIPE)
			self.logger.info("IPFS daemon running with PID {0}".format(self.process.pid))
			self.output, self.error = self.process.communicate()
			for line in self.output.splitlines():
				self.logger.info('IPFS - {0}'.format(line))
			self.status = self.process.returncode
		except:
			self.logger.error(traceback.format_exc())
			self.halt = True
			self.status = -1
			self.logger.error("IPFS daemon failed to start!")
			raise Exception

		while not self.halt:
			err = self.process.poll()
			if err is not None:
				self.halt = True
				break
			out,err = self.process.communicate()
			while len(out) > 0 and len(err) == 0:
				for line in out.splitlines():
					self.logger.info('IPFS - {0}'.format(line))
			if len(err) > 0:
				self.logger.error(err)
				self.halt = True
		if err is not None:
			self.logger.error("IPFS Terminated Unexpectedly With Error Code {0}".format())

	def stop(self):
		self.halt = True
		self.process.terminate()
		self.logger.info("IPFS shutdown.")

class RPCServerThread(threading.Thread):
	def __init__(self, threadID, name, logger, ip='localhost', port=8181):
		threading.Thread.__init__(self)
		self.threadID = threadID
		self.name = name
		self.counter = self.threadID
		self.rpc_ip = ip
		self.rpc_port = port
		self.logger = logger
		self.rpc_server = RPCServer(self.logger)
		self.halt = False

	def run(self):
		self.rpc_server.start(self.rpc_ip,self.rpc_port)

	def stop(self):
		self.halt = True
		self.rpc_server.httpd.shutdown()
		self.logger.info("RPC server shutdown.")

class InfinitiDaemon(Daemon):
	first_run = True
	uptime = 0
	p2p_sever = None
	my_ip_address = 'localhost'
	my_port = 0

	def load_peer_db(self):
		# trigger garbage collection closing db
		db = open_db(os.path.join(DATA_PATH,"peers"),self.logger)
		# turn the iterator into a list
		q = []
		items = db.iteritems()
		items.seek_to_first()
		min_error = 61
		error_delay = 60 * 60
		for k,v in list(items):
			if self.first_run:
				min_error = 54
			err,tme = v.split('.')
			if int(err) <= min_error:
				if int(tme) < int(time.time()) - error_delay or err==0:
					q.append((k,int(tme)))
		self.first_run = False
		return q

	def create_peer_db(self):
		# trigger garbage collection closing db
		db = open_db(os.path.join(DATA_PATH,"peers"),self.logger)
		wb = writebatch()
		for seed in param_query(NETWORK,'seeds'):
			wb.put(seed[0],"0.0")
		db.write(wb)

	def update_status(self,k,v):
		db = open_db(os.path.join(DATA_PATH,"status"),self.logger)
		db.put(k,v)	

	def get_status(self,k):
		db = open_db(os.path.join(DATA_PATH,"status"),self.logger)
		_v = db.get(k)
		if _v is None:
			db.put(k,str(_v))	
		return _v

	def get_peer_thread_count(self):
		# collect garbage
		for t in self.threads:
			if not t.isAlive():
				self.threads.remove(t)
		return len(self.threads)

	def get_connecting_count(self):
		count = 0
		for t in self.threads:
			if t.exit == False and t.error == False and t.is_connected == False:
				count += 1
		return count

	def get_connected_peer_count(self):
		count = 0
		for t in self.threads:
			if t.is_connected == True and t.exit == False and t.error == False:
				count += 1
		return count

	def get_peers(self,my_ip_address, my_port):
		# Clean up dead threads 
		self.logger.info("Network spider looking for peers.")        
		peers = self.load_peer_db() 
		if len(peers) == 0:
			self.create_peer_db()
			peers = self.load_peer_db() 
		self.logger.info("{0} peers loaded.".format(len(peers)))
		self.logger.info("{0} threads running.".format(self.get_peer_thread_count()))
		self.update_status('in_process_peers',str(self.get_connecting_count()))
		self.logger.info("{0} peers in process.".format(self.get_connecting_count()))
		self.update_status('connected_peers',str(self.get_connected_peer_count()))
		self.logger.info("{0} peers connected.".format(self.get_connected_peer_count()))
		for k,v in peers:
			if v > -1:
				peer_ip, peer_port = k.split(":")
				peer_port = int(peer_port)
				peer_found = False
				# make sure it's not already running
				for t in self.threads:
					if peer_ip == t.peerip:
						peer_found = True
				if not peer_found:
					self.counter += 1
					thread = TaoPeerThread(self.counter, "Peer-" + str(self.counter), self.logger, peer_ip, peer_port, my_ip_address, my_port)
					thread.daemon=True
					thread.start()
					self.threads.append(thread)
		self.last_peers = time.time()                                                        

	def create_databases(self):
		db = open_db(os.path.join(DATA_PATH,"status"),self.logger,False)

	def sync_wallets(self):
		syncwallets(self)

	def run(self):
		self.create_databases()
		# Register the signal handlers
		self.logger.info("Infiniti starting.")
		self.logger.info("Checking internet.")
		try:
			self.my_ip_address = load(urlopen('https://api.ipify.org/?format=json'))['ip'] 
			self.my_port = int(param_query(NETWORK,'p2p_port')) + 1
		except Exception:
			self.logger.error("Internet connection not found!")
			sys.exit(0)
		if not os.path.isdir(join_path(WALLET_PATH,'node')):
			self.logger.info("Creating node identity wallet.")
			createwallet(INFINITI_SECRET,'node')
		# A node uses a wallet for self-identity
		# Make sure to change INFINITI_SECRET to keep keys secure!
		self.logger.info("Loading node identity.")
		self.wallet = Wallet('node').fromFile(INFINITI_SECRET)
		# Make sure the IPFS key belongs to this node
		self.wallet._root.ExportRSAtoIPFS()

		try:
			uptime = self.get_status('uptime')
			self.threads = []
			self.counter = 0
			self.last_peers = time.time() - 100

			self.sync_wallets()

			self.rpc_server = RPCServerThread(self.counter, "RPCServer", self.logger)
			self.rpc_server.start()
			self.counter += 1

			self.ipfs_server = IPFSThread(self.counter, "IPFS", self.logger)
			self.ipfs_server.start()
			self.counter += 1
			wait_time = 0
			cycle_end = time.time()
			# Once every 15 minutes, try to reconnect to everyone
			reclaim_peers = 15 * 60
			self.relcaim_peers = time.time()
			while not self.got_sigterm():
				cycle_start = time.time() 
				wait_time = cycle_end - cycle_start
				self.uptime += wait_time
				if self.last_peers < time.time() - 60: # try new peers every 60 seconds
					if time.time() > (self.relcaim_peers + reclaim_peers):
						self.reclaim_peers = time.time()
						self.first_run = True
					self.get_peers(self.my_ip_address,self.my_port) 
				time.sleep(1)
				cycle_end = time.time()
				cycle_time = time.time() - cycle_start
				self.uptime += cycle_time
				self.update_status('uptime',str(self.uptime))
			self.halt()
		except Exception as e:
			self.logger.error(e, exc_info=True)
			self.logger.error("Infiniti Shutting down due to errors.")
			sys.exit(1)

	def halt(self):  # signum and frame are mandatory
		#self.p2p_server.stop()
		for t in self.threads:
			t.stop(0,'halt')
		self.rpc_server.stop()
		self.ipfs_server.stop()
		self.logger.info("Infiniti Shutting down.")

if __name__ == "__main__":
	infiniti = InfinitiDaemon(PID_FILE)
	if len(sys.argv) == 2:
		if 'start' == sys.argv[1]:
			print "Starting Infiniti on the {0} blockchain...".format(NETWORK)
			infiniti.start()
		elif 'stop' == sys.argv[1]:
			print "Stopping Infiniti..."
			infiniti.stop()
		elif 'restart' == sys.argv[1]:
			infiniti.restart()
		elif 'status' == sys.argv[1]:
			try:
				pf = file(PID_FILE + ".pid",'r')
				pid = int(pf.read().strip())
				pf.close()
			except IOError:
				pid = None
			except SystemExit:
				pid = None
			if pid:
				print 'Infiniti is running as pid %s' % pid
			else:
				print 'Infiniti is not running.'
		else:
			print "Unknown command"
			sys.exit(2)
	else:
		print "usage: %s start|stop|restart|status" % sys.argv[0]
		sys.exit(2)
