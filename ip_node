#!/usr/bin/python
from p2p.peer import InfinitiPeer
from infiniti.params import *
from p2p.protocol.serializers import *
from p2p.protocol.queues import MemPoolManager
from p2p.rpc import RPCServer
import threading, socket
import sys, traceback
import sched, time, os

from utils.db import open_db 

from json import load
from urllib2 import urlopen

from utils.daemonize import Daemon

try:
	ip_address = load(urlopen('https://api.ipify.org/?format=json'))['ip'] 
	port = param_query(NETWORK,'p2p_port')
except Exception:
	print "Internet connection not found!"
	sys.exit(0)

class PeerThread (threading.Thread):
	def __init__(self, threadID, name, logger, peer_ip, peer_port):
		threading.Thread.__init__(self)
		self.threadID = threadID
		self.name = name
		self.counter = self.threadID
		self.logger = logger
		self.client = InfinitiPeer(self.logger, peer_ip, peer_port)

	def stop(self):
		self.logger.info("{0} - Node disconnected.".format(self.client.peerip))
		self.client.exit = True
		self.client.touch_peer()

	def run(self):
		self.client.open(ip_address,port)
		self.client.loop()  

class RPCServerThread(threading.Thread):
	def __init__(self, threadID, name, logger, ip='localhost', port=8000):
		threading.Thread.__init__(self)
		self.threadID = threadID
		self.name = name
		self.counter = self.threadID
		self.rpc_ip = ip
		self.rpc_port = port
		self.logger = logger
		self.rpc_server = RPCServer(self.logger)
		self.halt = False

	def run(self):
		self.rpc_server.start(self.rpc_ip,self.rpc_port)

	def stop(self):
		self.halt = True
		self.rpc_server.httpd.shutdown()
		self.logger.info("RPC server shutdown.")

class InfinitiDaemon(Daemon):
	def load_peer_db(self):
		# trigger garbage collection closing db
		db = open_db(os.path.join(DATA_PATH,"peers"))
		# turn the iterator into a list
		q = []
		for k,v in db.RangeIter():
			if v > 255:
				q.append((k,int(v)))
		return q

	def create_peer_db(self):
		# trigger garbage collection closing db
		db = open_db(os.path.join(DATA_PATH,"peers"))
		import leveldb
		wb = leveldb.WriteBatch()
		for seed in SEEDS:
			wb.Put(seed[0],str(seed[1]))
		db.Write(wb)

	def get_peers(self):
		# Clean up dead threads 
		self.logger.info("Network spider looking for peers.")        
		for t in self.threads:
			if t.client.exit or t.client.error:
				self.threads.remove(t)
		peers = self.load_peer_db() 
		if len(peers) == 0:
			self.create_peer_db()
			peers = self.load_peer_db() 
		for k,v in peers:
			if v > -1:
				peer_ip, peer_port = k.split(":")
				peer_port = int(peer_port)
				peer_found = False
				# make sure it's not already running
				for t in self.threads:
					if peer_ip == t.client.peerip:
						peer_found = True
					# collect garbage
					if t.client.error or t.client.exit:
						self.threads.remove(t)
				if not peer_found:
					self.counter += 1
					thread = PeerThread(self.counter, "Peer-" + str(self.counter), self.logger, peer_ip, peer_port)
					thread.daemon=True
					thread.start()
					self.threads.append(thread)
		self.last_peers = time.time()                                                        

	def run(self):
		# Register the signal handlers
		self.logger.info("Infiniti starting.")
		try:
			self.threads = []
			self.counter = 0
			self.rpc_server = RPCServerThread(self.counter, "RPCServer", self.logger)
			self.rpc_server.start()
			self.counter += 1
			self.last_peers = time.time() - 100                                                        
			while not self.got_sigterm():
				if self.last_peers < time.time() - 60: # try new peers every 60 seconds
					self.get_peers() 
				time.sleep(1)
			self.halt()
		except Exception as e:
			self.logger.error(e, exc_info=True)
			self.logger.error("Infiniti Shutting down due to errors.")
			sys.exit(1)

	def halt(self):  # signum and frame are mandatory
		for t in self.threads:
			t.stop()
		self.rpc_server.stop()
		self.logger.info("Infiniti Shutting down.")

if __name__ == "__main__":
	infiniti = InfinitiDaemon(PID_FILE)
	if len(sys.argv) == 2:
		if 'start' == sys.argv[1]:
			print "Starting Infiniti..."
			infiniti.start()
		elif 'stop' == sys.argv[1]:
			print "Stopping Infiniti..."
			infiniti.stop()
		elif 'restart' == sys.argv[1]:
			infiniti.restart()
		elif 'status' == sys.argv[1]:
			try:
				pf = file(PIDFILE,'r')
				pid = int(pf.read().strip())
				pf.close()
			except IOError:
				pid = None
			except SystemExit:
				pid = None
			if pid:
				print 'Infiniti is running as pid %s' % pid
			else:
				print 'Infiniti is not running.'
		else:
			print "Unknown command"
			sys.exit(2)
	else:
		print "usage: %s start|stop|restart|status" % sys.argv[0]
		sys.exit(2)
