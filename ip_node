#!/usr/bin/python
from p2p.peer import InfinitiPeer
from infiniti.params import *
from p2p.protocol.serializers import *
from p2p.protocol.queues import MemPoolManager
from p2p.rpc import RPCServer
import threading, socket
import sys, traceback
import sched, time, os

from utils.db import open_db, writebatch

from json import load
from urllib2 import urlopen

from utils.daemonize import Daemon

class PeerThread (InfinitiPeer, threading.Thread):
	def __init__(self, threadID, name, logger, peer_ip, peer_port, my_ip_address, my_port):
		threading.Thread.__init__(self)
		self.threadID = threadID
		self.name = name
		self.counter = self.threadID
		self.logger = logger
		self.uptime = 0
		super(PeerThread, self).__init__(logger, peer_ip, peer_port, my_ip_address, my_port)

	def stop(self):
		self.exit = True
		self.touch_peer()
		self.logger.info("{0} - Thread stopping.".format(self.peerip))

	def run(self):
		self.open()
		self.running = time.time()
		# Send a ping every 30 minutes 
		ping_time = 30 * 60
		while (not self.error) and (not self.exit):
			if time.time() > (self.running + ping_time):
				self.running = time.time()
				self.send_message(Ping())
			try:
				if self.is_connected:
					data = self.socket.recv(1024 * 8)
			except socket.error as err:
				self.close()
				self.error = True
				self.is_connected = False 
				self.error_peer(err.errno)
				self.logger.error("IP: {0} : Loop Socket Error({1}): {2}".format(self.peerip,err.errno, err.strerror))				
			else:
				if len(data) <= 0:
					self.is_connected = False
				if self.is_connected:
					self.buffer.write(data)
					message_header, message = self.buffer.receive_message()
					if message is not None:
						self.message_received(message_header, message)
		self.logger.info("{0} - Thread closed.".format(self.peerip))

class RPCServerThread(threading.Thread):
	def __init__(self, threadID, name, logger, ip='localhost', port=8000):
		threading.Thread.__init__(self)
		self.threadID = threadID
		self.name = name
		self.counter = self.threadID
		self.rpc_ip = ip
		self.rpc_port = port
		self.logger = logger
		self.rpc_server = RPCServer(self.logger)
		self.halt = False

	def run(self):
		self.rpc_server.start(self.rpc_ip,self.rpc_port)

	def stop(self):
		self.halt = True
		self.rpc_server.httpd.shutdown()
		self.logger.info("RPC server shutdown.")

class InfinitiDaemon(Daemon):
	first_run = True
	def load_peer_db(self):
		# trigger garbage collection closing db
		db = open_db(os.path.join(DATA_PATH,"peers"),self.logger)
		# turn the iterator into a list
		q = []
		items = db.iteritems()
		items.seek_to_first()
		min_error = 255
		for k,v in list(items):
			if self.first_run:
				min_error = 54
			if int(v) >= min_error or int(v) == 0:
				q.append((k,int(v)))
		self.first_run = False
		return q

	def create_peer_db(self):
		# trigger garbage collection closing db
		db = open_db(os.path.join(DATA_PATH,"peers"),self.logger)
		wb = writebatch()
		for seed in SEEDS:
			wb.put(seed[0],str(seed[1]))
		db.write(wb)

	def update_status(self,k,v):
		db = open_db(os.path.join(DATA_PATH,"status"),self.logger)
		db.put(k,v)	

	def get_status(self,k):
		db = open_db(os.path.join(DATA_PATH,"status"),self.logger)
		_v = db.get(k)
		if _v is None:
			db.put(k,str(_v))	
		return _v

	def get_peer_thread_count(self):
		return len(self.threads)

	def get_peer_count(self):
		count = 0
		for t in self.threads:
			if t.exit == False and t.error == False:
				count += 1
		return count

	def get_connected_peer_count(self):
		count = 0
		for t in self.threads:
			if t.is_connected == True:
				count += 1
		return count

	def get_peers(self,my_ip_address, my_port):
		# Clean up dead threads 
		self.logger.info("Network spider looking for peers.")        
		for t in self.threads:
			if t.exit or t.error:
				self.threads.remove(t)
		peers = self.load_peer_db() 
		if len(peers) == 0:
			self.create_peer_db()
			peers = self.load_peer_db() 
		self.logger.info("{0} peers loaded.".format(len(peers)))
		self.logger.info("{0} threads running.".format(self.get_peer_thread_count()))
		self.logger.info("{0} peers in process.".format(self.get_peer_count()))
		self.logger.info("{0} peers connected.".format(self.get_connected_peer_count()))
		for k,v in peers:
			if v > -1:
				peer_ip, peer_port = k.split(":")
				peer_port = int(peer_port)
				peer_found = False
				# make sure it's not already running
				for t in self.threads:
					if peer_ip == t.peerip:
						peer_found = True
				if not peer_found:
					self.counter += 1
					thread = PeerThread(self.counter, "Peer-" + str(self.counter), self.logger, peer_ip, peer_port, my_ip_address, my_port)
					thread.daemon=True
					thread.start()
					self.threads.append(thread)
		self.last_peers = time.time()                                                        

	def run(self):
		# Register the signal handlers
		self.logger.info("Infiniti starting.")
		self.logger.info("Checking internet.")
		try:
			my_ip_address = load(urlopen('https://api.ipify.org/?format=json'))['ip'] 
			my_port = param_query(NETWORK,'p2p_port')
		except Exception:
			self.logger.error("Internet connection not found!")
			sys.exit(0)

		try:
			uptime = self.get_status('uptime')
			if uptime is None: 
				self.uptime = 0
			else:
				self.uptime = float(uptime)
			self.threads = []
			self.counter = 0
			self.rpc_server = RPCServerThread(self.counter, "RPCServer", self.logger)
			self.rpc_server.start()
			self.counter += 1
			self.last_peers = time.time() - 100
			wait_time = 0
			cycle_end = time.time()
			while not self.got_sigterm():
				cycle_start = time.time() 
				wait_time = cycle_end - cycle_start
				self.uptime += wait_time
				connected_peers = 0                                                       
				# collect garbage
				for t in self.threads:
					if not t.isAlive() or t.error or t.exit:
						self.threads.remove(t)
					else:
						connected_peers += 1
				self.update_status('connected_peers',str(connected_peers))
				self.update_status('in_process_peers',str(len(self.threads)))
				if self.last_peers < time.time() - 60: # try new peers every 60 seconds
					self.get_peers(my_ip_address,my_port) 
				time.sleep(1)
				cycle_end = time.time()
				cycle_time = time.time() - cycle_start
				self.uptime += cycle_time
				self.update_status('uptime',str(self.uptime))
			self.halt()
		except Exception as e:
			self.logger.error(e, exc_info=True)
			self.logger.error("Infiniti Shutting down due to errors.")
			sys.exit(1)

	def halt(self):  # signum and frame are mandatory
		for t in self.threads:
			t.stop()
		self.rpc_server.stop()
		self.logger.info("Infiniti Shutting down.")

if __name__ == "__main__":
	infiniti = InfinitiDaemon(PID_FILE)
	if len(sys.argv) == 2:
		if 'start' == sys.argv[1]:
			print "Starting Infiniti..."
			infiniti.start()
		elif 'stop' == sys.argv[1]:
			print "Stopping Infiniti..."
			infiniti.stop()
		elif 'restart' == sys.argv[1]:
			infiniti.restart()
		elif 'status' == sys.argv[1]:
			try:
				pf = file(PIDFILE,'r')
				pid = int(pf.read().strip())
				pf.close()
			except IOError:
				pid = None
			except SystemExit:
				pid = None
			if pid:
				print 'Infiniti is running as pid %s' % pid
			else:
				print 'Infiniti is not running.'
		else:
			print "Unknown command"
			sys.exit(2)
	else:
		print "usage: %s start|stop|restart|status" % sys.argv[0]
		sys.exit(2)
